
; available: 0x22 -> 0x7F and 0xA9 -> 0xFF

; banks
REG_RAM_BANK = $00
REG_ROM_BANK = $01

; kernal registers
; entire kernal register range is used for various function argumens
REG_0_L = $02
REG_0_H = $03
REG_1_L = $04
REG_1_H = $05

; PS2 input (mouse)
INPUT_MOUSE_A = $02
INPUT_MOUSE_B = $03
INPUT_MOUSE_C = $04
INPUT_MOUSE_D = $05

; files
FILE_LOAD_RDSIZE = $02

; pointers
COLORMAP_L = $22	; forced by tables, do not change address
COLORMAP_H = $23	; forced by tables, do not change address
LIGHTMAP_L = $24	; forced by tables, do not change address
LIGHTMAP_H = $25	; forced by tables, do not change address
COLORMAP_B = $26
PLANE_PTR_TOP_L = $27	; this must stay at zero
PLANE_PTR_TOP_H = $28
PLANE_PTR_BOT_L = $29	; this must stay at zero
PLANE_PTR_BOT_H = $2A
THMOVE_PTR_L = $2B	; this must stay at zero
THMOVE_PTR_H = $2C
TMP_PTR_L = $2D
TMP_PTR_H = $2E
TMP_PTR_I = $2F
FUNC_ARG_L = $30
FUNC_ARG_H = $31
SECTOR_PTR_I = $32
BACKSEC_PTR_I = $33
WALL_PTR_L = $34
WALL_PTR_H = $35
WALL_PTR_B = $36
WALN_PTR_L = $37
WALN_PTR_H = $38
TEXTURE_PTR_L = $39
TEXTURE_PTR_H = $3A
COLUMN_PTR_L = $3B
COLUMN_PTR_H = $3C
COLUMN_PTR_B = $3D
MASKED_PTR_L = $3E
MASKED_PTR_H = $3F

; pointer overlap
HI_PTR_L = PLANE_PTR_TOP_L
HI_PTR_H = PLANE_PTR_TOP_H
IH_PTR_L = PLANE_PTR_BOT_L
IH_PTR_H = PLANE_PTR_BOT_H
SPR_PTR_L = THMOVE_PTR_L
SPR_PTR_H = THMOVE_PTR_H
THTEMP_PTR_L = COLUMN_PTR_L
THTEMP_PTR_H = COLUMN_PTR_H
THANIM_PTR_L = MASKED_PTR_L
THANIM_PTR_H = MASKED_PTR_H
THCES_PTR_L = WALL_PTR_L
THCES_PTR_H = WALL_PTR_H
MENUCFG_PTR_L = WALL_PTR_L
MENUCFG_PTR_H = WALL_PTR_H

; special thing temp storage
TMP_THING_NXTFRM_L = $20
TMP_THING_NXTFRM_H = $21
TMP_THING_GRAVITY_S = TMP_THING_NXTFRM_L
TMP_THING_GRAVITY_L = TMP_THING_NXTFRM_H

; special state action temp storage
TMP_STACT_TICK_ADD = $1B
TMP_STACT_FRM_L = $1C
TMP_STACT_FRM_H = $1D
TMP_STACT_ARG_0 = $1E
TMP_STACT_ARG_1 = $1F
TMP_STACT_ARG_2 = $20

; special hitscan temp storage (shared with action)
TMP_HITSCAN_ORIGIN = $21

; special render temp storage
TMP_REND_WPN_OFFS_L = $1E
TMP_REND_WPN_OFFS_H = $1F
TMP_REND_WPN_LIGHT = $20
TMP_REND_WPN_IDX = $21

; math
MATH_VAR_L = $40
MATH_VAR_H = $41
MATH_VAR_U = $42
MATH_VAR_SIGN = $43
MATH_TEMP = MATH_VAR_SIGN
MATH_P2A_X_L = $44
MATH_P2A_X_H = $45
MATH_P2A_Y_L = $46
MATH_P2A_Y_H = $47
MATH_COUNTER = $48

; math overlap
MATH_TEMP_A = MATH_VAR_L
MATH_TEMP_B = MATH_VAR_H

; input (preserved)
INPUT_MOUSE_X_L = $49
INPUT_MOUSE_X_H = $4A
INPUT_MOUSE_Y_L = $4B
INPUT_MOUSE_Y_H = $4C
INPUT_STATE_L = $4D
INPUT_STATE_H = $4E
INPUT_MOUSE_BTN = $4F

; input
INPUT_MOUSE_TMP_X = VIDEO_TMP_0
INPUT_MOUSE_TMP_Y = VIDEO_TMP_1
INPUT_WEAPON_SLOT = $B0

; video (drawing)
VIDEO_PAGE_L = $50	; forced by tables, do not change address
VIDEO_PAGE_H = $51	; forced by tables, do not change address
VIDEO_PAGE = $52
VIDEO_DRAW_X = $53
VIDEO_DRAW_Y = $54
VIDEO_DRAW_YY = $55
VIDEO_DRAW_L = $56
VIDEO_DRAW_S = $57
VIDEO_TMP_0 = $58
VIDEO_TMP_1 = $59

VIDEO_DRAW_XX = VIDEO_DRAW_L

; tick stuff
TICK_CMD_BITS_L = $5A
TICK_CMD_BITS_H = $5B
TICK_CMD_ANGLE = $5C
TICK_CMD_PITCH = $5D
TICK_COUNT = $5E
TICK_IDX = $5F

; very global variables
G_TICKER = $70
G_NEW_TICS = $71
G_LEVEL_TICK_L = $72
G_LEVEL_TICK_M = $73
G_LEVEL_TICK_H = $74
G_PLAYER_THING = $75
G_CAMERA_THING = $76
G_VIEW_HEIGHT = $77
G_VIEWHEIGHT = $78
G_VIEWDELTA = $79
G_DAMAGE_LEVEL = $7A
G_PALETTE_NOW = $7B
G_PALETTE_NEW = $7C
G_WPN_NOW_LIGHT = $7D
G_WPN_NOW_OFFS_L = $7E
G_WPN_NOW_OFFS_H = $7F
G_WPN_VERA_SLOT = $A9
G_WPN_LIGHT_NEW = $AA
G_WPN_AVG = $AB
G_RNG_L = $AC
G_RNG_H = $AD

; projection (global when rendering)
PROJECTION_X_L = $E0
PROJECTION_X_H = $E1
PROJECTION_Y_L = $E2
PROJECTION_Y_H = $E3
PROJECTION_Z_L = $E4
PROJECTION_Z_H = $E5
PROJECTION_A_L = $E6
PROJECTION_A_H = $E7
PROJECTION_SIN_L = $E8
PROJECTION_SIN_H = $E9
PROJECTION_COS_L = $EA
PROJECTION_COS_H = $EB
PROJECTION_YCW = $EC
PROJECTION_YCP = $ED
PROJECTION_A8 = $EE
PROJECTION_SECTOR = $EF
PROJECTION_X0 = $F0
PROJECTION_X0D = $F1
PROJECTION_X1 = $F2
PROJECTION_X1D = $F3
PROJECTION_PORTAL_RD = $F4
PROJECTION_PORTAL_WR = $F5
PROJECTION_PORTAL_LAST = $F6
PROJECTION_SPRITE_IDX = $F7
PROJECTION_MASKED_IDX = $F8
PROJECTION_FIRST_SPRITE = $F9
PROJECTION_LIGHT = $FA

; video register (passed from loader, only used for video init)
REG_VIDEO_MODE = $FF

;;;
; temporary variables used only in specific functions
;;;

; map loading
MAP_HEAD_MAGIC = $B0
MAP_HEAD_VERSION = $B8
MAP_HEAD_FLAGS = $B9
MAP_HEAD_COUNT_LIGHTS = $BA
MAP_HEAD_COUNT_PTEX = $BB
MAP_HEAD_COUNT_WTEX = $BC
MAP_HEAD_COUNT_TEXTURES = $BD
MAP_HEAD_COUNT_SECTORS = $BE
MAP_HEAD_COUNT_STARTS_NORM = $BF
MAP_HEAD_COUNT_STARTS_COOP = $C0
MAP_HEAD_COUNT_STARTS_DM = $C1
MAP_HEAD_COUNT_THINGS = $C2

MAP_HEAD_SIZE_DATA_L = $CA
MAP_HEAD_SIZE_DATA_H = $CB
MAP_HEAD_HASH_SKY = $CC

MAP_PLANE_BASE = $B0
MAP_PLANE_VCNT = $B1

MAP_WALL_DLEN = MAP_PLANE_BASE
MAP_WALL_VCNT = MAP_PLANE_VCNT

; map loading variables
MAP_LOAD_IDX = $D0
MAP_LOAD_XDI = $D1
MAP_LOAD_AIDX = $D2
MAP_LOAD_P4 = $D3
MAP_LOAD_P8 = $D4
MAP_LOAD_TEX = $D5
MAP_LOAD_LIGHT_TMP = $D6
MAP_LOAD_LIGHT_COL = $D7
MAP_LOAD_TMP_LIGHTS = $D8
MAP_LOAD_TMP_BRIGHT_0 = $D9
MAP_LOAD_TMP_BRIGHT_1 = $DA
MAP_LOAD_TMP_L = $DB
MAP_LOAD_TMP_H = $DC

MAP_LOAD_SIDX = MAP_LOAD_TEX

MAP_LOAD_TOP_FRAME = MAP_LOAD_P4
MAP_LOAD_VIDX = MAP_LOAD_TMP_BRIGHT_0

MAP_TMP_PTR_L = MAP_LOAD_LIGHT_TMP
MAP_TMP_PTR_H = MAP_LOAD_LIGHT_COL

; thing movement and position check
THMOVE_FLOORZ_L = $B0
THMOVE_FLOORZ_H = $B1
THMOVE_CEILZ_L = $B2
THMOVE_CEILZ_H = $B3
THMOVE_TRY_COUNT = $B4
THMOVE_THING = $B5
THMOVE_PORTAL_RD = $B6
THMOVE_PORTAL_WR = $B7
THMOVE_INSIDE = $B8
THMOVE_SDX = $B9
THMOVE_NOCLIP = $BA
THMOVE_RADIUS = $BB
THMOVE_HEIGHT = $BC
THMOVE_BLOCKEDBY = $BD
THMOVE_STEP_HEIGHT = $BE
THMOVE_START_X_L = $BF
THMOVE_START_X_H = $C0
THMOVE_START_Y_L = $C1
THMOVE_START_Y_H = $C2
THMOVE_FAIL_SAFE = $C3
THMOVE_THZT_L = $C4
THMOVE_THZT_H = $C5
THMOVE_D0_X_L = $C6
THMOVE_D0_X_H = $C7
THMOVE_D0_Y_L = $C8
THMOVE_D0_Y_H = $C9
THMOVE_DIST_L = $CA
THMOVE_DIST_H = $CB
THMOVE_BACKSECTOR = $CC
THMOVE_WMX_S = $CD
THMOVE_WMX_L = $CE
THMOVE_WMY_S = $CF
THMOVE_WMY_L = $D0
THMOVE_OLD_FZ_L = $D1
THMOVE_OLD_FZ_H = $D2
THMOVE_VTX_X_L = $D3
THMOVE_VTX_X_H = $D4
THMOVE_VTX_Y_L = $D5
THMOVE_VTX_Y_H = $D6
THMOVE_BVECT_X_L = $D7
THMOVE_BVECT_X_H = $D8
THMOVE_BVECT_Y_L = $D9
THMOVE_BVECT_Y_H = $DA
THMOVE_BVECT_ANG = $DB
THMOVE_BLOCKED = $DC
THMOVE_BACKBLOCK = $DD
THMOVE_IFLAGS = $DE
THMOVE_THING_TYPE = $DF
THMOVE_TFZ_L = $E0
THMOVE_TFZ_H = $E1
THMOVE_TCZ_L = $E2
THMOVE_TCZ_H = $E3
THMOVE_WATERZ_L = $E4
THMOVE_WATERZ_H = $E5
THMOVE_ISLINK = $E6
THMOVE_ISLINK_SAVE = $E7
THMOVE_WATER_HEIGHT = $E8
THMOVE_TOUCH = $E9
THMOVE_TOUCH_SAVE = $EA
THMOVE_MASKBLOCK = $EB
THMOVE_FALLBACK = $EC
THMOVE_HIT_THING = $ED
THMOVE_EFLAGS = $EE
THMOVE_FLOORS = $EF
THMOVE_CEILS = $F0
THMOVE_MOVE_AGAIN = $F1

; overlap
THMOVE_ALT_RADIUS = THMOVE_NOCLIP

; player type change (crouching / swimming / flying)
THMOVE_NEW_PTYPE = THMOVE_BLOCKED
THMOVE_PTC_OLD_HEIGHT = THMOVE_BACKBLOCK
THMOVE_PTC_HEIGHT = THMOVE_IFLAGS
THMOVE_PTC_GRAVITY = THMOVE_DIST_L
THMOVE_PTC_CEILZ_L = THMOVE_D0_X_L
THMOVE_PTC_CEILZ_H = THMOVE_D0_X_H
THMOVE_PTC_FLOORZ_L = THMOVE_VTX_X_L
THMOVE_PTC_FLOORZ_H = THMOVE_VTX_X_H
THMOVE_PTC_VIEW_HEIGHT_N = THMOVE_THZT_L
THMOVE_PTC_VIEW_HEIGHT_O = THMOVE_THZT_H
THMOVE_PTC_DIFF_L = THMOVE_DIST_L
THMOVE_PTC_DIFF_H = THMOVE_DIST_H
THMOVE_PTC_ZIFF = THMOVE_D0_X_L
THMOVE_PTC_WIFF = THMOVE_D0_X_H

; thing height check overlap
THMOVE_THZW_L = THMOVE_VTX_X_L
THMOVE_THZW_H = THMOVE_VTX_X_H

; thing movement overlap
THMOVE_ANG_L = THMOVE_D0_X_L
THMOVE_ANG_H = THMOVE_D0_X_H

; thing stuff overlap
THMOVE_GRAVITY = THMOVE_DIST_L

; thing-thing check overlap
THMOVE_RADRAD_L = THMOVE_DIST_L
THMOVE_RADRAD_H = THMOVE_DIST_H
THMOVE_ZZZ_L = THMOVE_DIST_L
THMOVE_ZZZ_H = THMOVE_DIST_H
THMOVE_TMP_L = THMOVE_D0_X_L
THMOVE_TMP_H = THMOVE_D0_X_H
THMOVE_OTHER_THING = THMOVE_WMX_S

; hitscan
HITSCAN_NEW_ANGLE = $B0
HITSCAN_LAST_ANGLE = $B1
HITSCAN_WALL_FLAGS = $B2
HITSCAN_D0_X_L = $B3
HITSCAN_D0_X_H = $B4
HITSCAN_D0_Y_L = $B5
HITSCAN_D0_Y_H = $B6
HITSCAN_DIST_L = $B7
HITSCAN_DIST_H = $B8
HITSCAN_TSID_L = $B9
HITSCAN_TSID_H = $BA
HITSCAN_SIN_L = $BB
HITSCAN_SIN_H = $BC
HITSCAN_COS_L = $BD
HITSCAN_COS_H = $BE
HITSCAN_IDIV_L = $BF
HITSCAN_IDIV_H = $C0
HITSCAN_WTAN_L = $C1
HITSCAN_WTAN_H = $C2
HITSCAN_PTAN_L = $C3
HITSCAN_PTAN_H = $C4
HITSCAN_ZZ_L = $C5
HITSCAN_ZZ_H = $C6
HITSCAN_AXIS = $C7
HITSCAN_HEIGHT = $C8
HITSCAN_RADIUS = $C9
HITSCAN_BLOCKBY = $CA
HITSCAN_TEXTURE = $CB
HITSCAN_SEC_IDX = $CC
HITSCAN_PICK_TDX = $CD
HITSCAN_PICK_SDX = $CE
HITSCAN_PICK_Z_L = $CF
HITSCAN_PICK_Z_H = $D0
HITSCAN_ZTMP_L = $D1
HITSCAN_ZTMP_H = $D2
HITSCAN_HIT_ANGLE = $D3

; overlap
HITSCAN_THG_IDX_L = FUNC_ARG_L
HITSCAN_THG_IDX_H = FUNC_ARG_H

; masked rendering
MASKED_DRAW_TNOW_L = $C0
MASKED_DRAW_TNOW_M = $C1
MASKED_DRAW_TNOW_H = $C2
MASKED_SCALE_STEP_L = $C3
MASKED_SCALE_STEP_M = $C4
MASKED_SCALE_STEP_H = $C5
MASKED_SCALE_NOW_L = $C6
MASKED_SCALE_NOW_M = $C7
MASKED_SCALE_NOW_H = $C8
MASKED_TEX_SCALE_L = $C9
MASKED_TEX_SCALE_H = $CA
MASKED_MT_BZ_L = $CB
MASKED_MT_BZ_H = $CC
MASKED_ZDIFF_L = $CD
MASKED_ZDIFF_H = $CE
MASKED_DRAW_TOP = $CF
MASKED_DRAW_BOT_L = $D0
MASKED_DRAW_BOT_H = $D1
MASKED_CLIP_BOT = $D2
MASKED_CLIP_TOP = $D3
MASKED_TEXTURE_FLAGS = $D4
MASKED_X1 = $D5

MASKED_MT_OX = $DD
MASKED_MT_XOR = $DE
MASKED_MT_TEXTURE = $DF

; masked overlap
MASKED_COL_LEN = VIDEO_TMP_0

; sprite rendering
SPRITE_DIST_L = $C0
SPRITE_DIST_H = $C1
SPRITE_DSCL_L = $C2
SPRITE_DSCL_H = $C3
SPRITE_CLIP_Y0 = $C4
SPRITE_CLIP_Y1 = $C5
SPRITE_ANG_L = $C6
SPRITE_ANG_H = $C7
SPRITE_XC_L = $C8
SPRITE_XC_H = $C9
SPRITE_X0_L = $CA
SPRITE_X0_H = $CB
SPRITE_BOT_L = $CC
SPRITE_BOT_H = $CD
SPRITE_TOP = $CE
SPRITE_TEX_STEP_L = $CF
SPRITE_TEX_STEP_H = $D0
SPRITE_TEX_NOW_L = $D1
SPRITE_TEX_NOW_H = $D2
SPRITE_SCALE_L = $D3
SPRITE_SCALE_H = $D4
SPRITE_OFFS_X = $D5
SPRITE_OFFS_Y_L = $D6
SPRITE_OFFS_Y_H = $D7
SPRITE_WIDTH = $D8
SPRITE_HEIGHT = $D9
SPRITE_COLS_L = $DA
SPRITE_COLS_H = $DB
SPRITE_DATA_L = $DC
SPRITE_DATA_H = $DD
SPRITE_THING = $DE
SPRITE_BRIGHT = $DF

; sprite variables overlap - extra storage
SPRITE_DIFF_L = VIDEO_TMP_0
SPRITE_DIFF_H = VIDEO_TMP_1

; sprite variables overlap - these are used at different stages
SPRITE_TMP_0 = SPRITE_DIFF_L
SPRITE_DEPTH_L = SPRITE_DIFF_L
SPRITE_DEPTH_H = SPRITE_DIFF_H
SPRITE_TEX_SCALE_L = SPRITE_ANG_L
SPRITE_TEX_SCALE_H = SPRITE_ANG_H
SPRITE_SORT_PREV = SPRITE_OFFS_Y_L
SPRITE_SORT_CHECK = SPRITE_OFFS_Y_H
SPRITE_NEXT = SPRITE_THING

SPRITE_CLIP_TOP = SPRITE_XC_H
SPRITE_CLIP_BOT = SPRITE_X0_H
SPRITE_COL_LEN = SPRITE_OFFS_X
SPRITE_DRAW_BOT_L = SPRITE_OFFS_Y_L
SPRITE_DRAW_BOT_H = SPRITE_OFFS_Y_H
SPRITE_DRAW_TOP = SPRITE_WIDTH
SPRITE_DRAW_TNOW_L = SPRITE_HEIGHT
SPRITE_DRAW_TNOW_M = SPRITE_THING
SPRITE_DRAW_TNOW_H = SPRITE_TOP

SPRITE_CLIP_FLAG = VIDEO_DRAW_S

; sprite variables forced overlap - this avoids copying
SPRITE_X1_L = SPRITE_XC_L
SPRITE_X1_H = SPRITE_XC_H
SPRITE_XDIFF_L = MATH_VAR_L
SPRITE_XDIFF_H = MATH_VAR_H

; plane rendering
PLANE_LOOP_X = $C0
PLANE_LOOP_T0 = $C1
PLANE_LOOP_T1 = $C2
PLANE_LOOP_B0 = $C3
PLANE_LOOP_B1 = $C4
PLANE_DRAW_SX_L = $C5
PLANE_DRAW_SX_H = $C6
PLANE_DRAW_STEP_L = $C7
PLANE_DRAW_STEP_H = $C8
PLANE_DRAW_XS_L = $C9
PLANE_DRAW_XS_H = $CA
PLANE_DRAW_XN_L = $CB
PLANE_DRAW_XN_H = $CC
PLANE_DRAW_YS_L = $CD
PLANE_DRAW_YS_H = $CE
PLANE_DRAW_YN_L = $CF
PLANE_DRAW_YN_H = $D0
PLANE_HEIGHT_L = $D1
PLANE_HEIGHT_H = $D2
PLANE_TEMP = $D3
PLANE_POS_X_L = $D4
PLANE_POS_X_H = $D5
PLANE_POS_Y_L = $D6
PLANE_POS_Y_H = $D7
PLANE_SIN_L = $D8
PLANE_SIN_H = $D9
PLANE_COS_L = $DA
PLANE_COS_H = $DB

; plane variables overlap
PLANE_DRAW_Y1 = PLANE_LOOP_T0
PLANE_DRAW_LEN = PLANE_LOOP_T1

; plane variables forced overlap - this avoids copying
PLANE_DRAW_X0 = VIDEO_DRAW_X
PLANE_DRAW_X1 = VIDEO_DRAW_XX
PLANE_DRAW_Y = VIDEO_DRAW_Y

; wall calculation
WALL_A0_L = $B0
WALL_A0_H = $B1
WALL_A1_L = $B2
WALL_A1_H = $B3
WALL_D0_X_L = $B4
WALL_D0_X_H = $B5
WALL_D0_Y_L = $B6
WALL_D0_Y_H = $B7
WALL_D1_X_L = $B8
WALL_D1_X_H = $B9
WALL_D1_Y_L = $BA
WALL_D1_Y_H = $BB
WALL_LD_X_L = $BC
WALL_LD_X_H = $BD
WALL_LD_Y_L = $BE
WALL_LD_Y_H = $BF
WALL_P0_X_L = $C0
WALL_P0_X_H = $C1
WALL_P1_X_L = $C2
WALL_P1_X_H = $C3
WALL_DC_X_L = $C4
WALL_DC_X_H = $C5
WALL_DC_Y_L = $C6
WALL_DC_Y_H = $C7
WALL_CLIP_LEFT = $C8
WALL_CLIP_RIGHT = $C9
WALL_X1 = $CA
WALL_X0 = $CB
WALL_SCALE_NOW_L = $CC
WALL_PORTAL_TOP = $CD
WALL_PORTAL_BOT = $CE
WALL_Y_START_L = $CF
WALL_Y_START_M = $D0
WALL_Y_START_H = $D1
WALL_HAVE_TEX_X = $D2
WALL_X0_TMP = $D3
WALL_LEN_BKUP = $D4
WALL_TEXTURE_FIX = $D5
WALL_TEXTURE_XOR = $D6
WALL_TEXTURE_FLAGS = $D7
WALL_TEXTURE_WX = $D8
WALL_MASKED_IDX = $D9

; wall variables overlap - these are used at different stages
WALL_XPEG = WALL_LEN_BKUP
WALL_P0_Y_L = WALL_A0_L
WALL_P0_Y_H = WALL_A0_H
WALL_P1_Y_L = WALL_A1_L
WALL_P1_Y_H = WALL_A1_H
WALL_CLIP_TOP = WALL_P0_X_L
WALL_CLIP_BOT = WALL_P0_X_H
WALL_CLIP_DIFF_L = WALL_P1_X_L
WALL_CLIP_DIFF_H = WALL_P1_X_H
WALL_SCALE_STEP_L = WALL_A1_L
WALL_SCALE_STEP_M = WALL_A1_H
WALL_SCALE_STEP_H = WALL_D0_X_L
WALL_TOP_NOW_L = WALL_D0_X_H
WALL_TOP_NOW_M = WALL_D0_Y_L
WALL_TOP_NOW_H = WALL_D0_Y_H
WALL_TOP_STEP_L = WALL_D1_X_L
WALL_TOP_STEP_M = WALL_D1_X_H
WALL_TOP_STEP_H = WALL_D1_Y_L
WALL_BOT_NOW_L = WALL_D1_Y_H
WALL_BOT_NOW_M = WALL_DC_X_L
WALL_BOT_NOW_H = WALL_DC_X_H
WALL_BOT_STEP_L = WALL_DC_Y_L
WALL_BOT_STEP_M = WALL_DC_Y_H
WALL_BOT_STEP_H = WALL_SCALE_NOW_L
WALL_LCA_L = WALL_CLIP_LEFT
WALL_LCA_H = WALL_CLIP_RIGHT
WALL_PORTAL_INSIDE = WALL_CLIP_LEFT
WALL_TMP_CALC_L = VIDEO_TMP_0
WALL_TMP_CALC_H = VIDEO_TMP_1
WALL_Y0 = VIDEO_DRAW_YY
WALL_MT_BZ_L = WALL_BOT_NOW_L
WALL_MT_BZ_H = WALL_BOT_NOW_M
WALL_MT_OX = WALL_BOT_NOW_H
WALL_MT_TEXTURE = WALL_BOT_STEP_L
WALL_MT_XOR = VIDEO_TMP_0
WALL_MT_SFLAGS = VIDEO_TMP_1
WALL_LAST_ANGLE_L = FUNC_ARG_L
WALL_LAST_ANGLE_H = FUNC_ARG_H

; wall variables forced overlap - this avoids copying
WALL_Y1 = VIDEO_DRAW_Y
WALL_SCALE_NOW_M = WALL_P0_Y_L
WALL_SCALE_NOW_H = WALL_P0_Y_H

; texturing info
RENDER_TEXTURE_INFO_IDX = $DA
RENDER_TEXTURE_ETIME_L = $DB
RENDER_TEXTURE_ETIME_H = $DC
RENDER_TEXTURE_ANGLE = $DD
RENDER_TEXTURE_OX = $DE
RENDER_TEXTURE_OY = $DF

